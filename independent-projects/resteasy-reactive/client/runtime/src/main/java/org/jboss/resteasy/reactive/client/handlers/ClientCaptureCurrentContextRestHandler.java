package org.jboss.resteasy.reactive.client.handlers;

import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;

import org.jboss.resteasy.reactive.client.impl.ClientRequestContextImpl;
import org.jboss.resteasy.reactive.client.impl.RestClientRequestContext;
import org.jboss.resteasy.reactive.client.spi.ClientRestHandler;

/**
 * This handler is meant to be executed first in the handler chain and it captures some useful information like caller
 * stacktrace.
 */
public class ClientCaptureCurrentContextRestHandler implements ClientRestHandler {

    private static final String RESTEASY_REACTIVE_PACKAGE = "org.jboss.resteasy.reactive";
    private static final String AUTOGENERATED_TAG = "$$";
    private static final StackTraceElement[] EMPTY_ARRAY = new StackTraceElement[0];
    private final boolean captureStacktrace;

    public ClientCaptureCurrentContextRestHandler(boolean captureStacktrace) {
        this.captureStacktrace = captureStacktrace;
    }

    @Override
    public void handle(RestClientRequestContext requestContext) throws Exception {
        ClientRequestContextImpl clientRequestContext = requestContext.getClientRequestContext();
        if (clientRequestContext == null) {
            return;
        }

        if (captureStacktrace) {
            captureCallerStackTrace(clientRequestContext);
        }
    }

    private void captureCallerStackTrace(ClientRequestContextImpl clientRequestContext) {
        List<StackTraceElement> effectiveStackTrace = StackWalker.getInstance().walk(new Function<>() {
            @Override
            public List<StackTraceElement> apply(Stream<StackWalker.StackFrame> stream) {
                return stream.dropWhile(new Predicate<>() {
                    @Override
                    public boolean test(StackWalker.StackFrame stackFrame) {
                        String className = stackFrame.getClassName();
                        return className.startsWith(RESTEASY_REACTIVE_PACKAGE) || className.contains(AUTOGENERATED_TAG);
                    }
                }).limit(5).map(StackWalker.StackFrame::toStackTraceElement).toList();
            }
        });

        clientRequestContext.getRestClientRequestContext()
                .setCallerStackTrace(effectiveStackTrace.toArray(EMPTY_ARRAY));
    }
}
